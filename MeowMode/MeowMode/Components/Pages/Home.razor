@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<!--JETI KOODI ALKAA-->
<script src="js/site.js"></script>
<style>
        #saveDiv {
            display: none;
        }
</style>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<PageTitle>Home</PageTitle>
<div class="m-4">
<button class="btn btn-info" id="saveButton" style="height: 58px;"><img id="saveimage" src="images/saves.png"></button>
<p>@alert</p>
</div>

<div id="saveDiv">
    <button id="close" class="btn btn-danger">X</button>
    <button class="btn btn-info" @onclick="NewSave" style="color: rgb(245, 245, 245);">New Save</button>
    <input type="text" @bind="saveName" placeholder="Name your save"/><br>

@if (@filut.Count == 0)
{
    <p><em>No saves available</em></p>
}
else
{
    <table style="width: 100px;" class="table table-sm text-center">
        <thead>
            <tr>
                <th colspan="4">Saves</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var saves in filut)
            {
                <tr>
                    <td style="padding-top: 7px;">@saves</td>
                    <td><button @onclick="() => SaveData(saves)" class="btn-sm btn-primary popup">Save</button></td>
                    <td><button @onclick="() => LoadData(saves)" class="btn-sm btn-success popup">Load</button></td>
                    <td><button @onclick="() => DeleteData(saves)" class="btn-sm btn-danger popup">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

<script>
    $(document).ready(function(){
        $("#saveButton").click(function(){
            $("#saveDiv").show(1000);
        });

        $("#close").click(function(){
            $("#saveDiv").hide(1000);
        });
    });
</script>

<audio id="meowSound" src="sounds/meow.wav"></audio>

<button class="btn btn-primary" @onclick="PlayMeow">Play Meow</button>

<!--JETI KOODI LOPPUU-->

<!-- paavon koodi alkaa -->

<h1>MEGAMEOWMODE!!!!</h1>

    <!-- Alla oleva koodi on pelissä oleva kissa -nappi. Se toimii javalla
        The code underneath is the cat button. It runs on java-->
    <div>
        <button id="switchButton" @onclick="IncrementCount">
            <img id="switchCat" src="images/cat.png">
            <img id="pressedCat" src="images/cat-pressed.png" style="display: none;">
        </button>
        <!-- Tässä alla olevassa koodissa on kissan toiminta, eli kun klikataan kissaa, se hakkaa pöytää.
        The code underneath is how the cat works, so when the cat is clicked it taps the table.-->
        <script>
            var clickButton = document.getElementById('switchButton');
            var switchCat = document.getElementById('switchCat');
            var pressedCat = document.getElementById('pressedCat');

            // Tämä koodinpätkä vaikuttaa siihen miltä kissa näyttää. NONE tarkoittaa sitä, että "alkuperäinen" kissa häviää
            //ja "block" tarkoittaa sitä, että kissa jolla on tassu alhaalla tulee näkyviin.
            //this bit of code makes it so the cat with its paw up disappears and displays the cat with the paw down

            clickButton.onmousedown = function () {
                switchCat.style.display = "none";
                pressedCat.style.display = "block";
            }
            //tämä koodinpätkä tekee taas päinvastaisen
            //and this bit of code is the reverse

            clickButton.onmouseup = function () {
                switchCat.style.display = "block";
                pressedCat.style.display = "none";
            }


        </script>
        <h2>Coins: @Coin</h2>
        <h2>Total coins: @totalCoin</h2>
    </div>

    <div class="button-container">
    @if (unitycatlevel >= 25 && !unitycatactivate)
    {
        <button class="btn btn-primary" @onclick="Powerups">2x Clicks <br>Cost: 10K</button>
    }
    @if (unitycatlevel == 0)
    {
    <button class="btn @GetPowerUpButtonClass()" @onclick="unitycat" disabled="@CanUsePowerUp">Power-Up @UnityCatCost</button><br>
    }

    @if (unitycatlevel == 1)
    {
    <button class="btn @GetPowerUpButtonClass2()" @onclick="unitycat2" disabled="@CanUsePowerUp2">Power-Up @UnityCatCost2</button><br>
    }

    @if (unitycatlevel == 2)
    {
    <button class="btn @GetPowerUpButtonClass3()" @onclick="unitycat3" disabled="@CanUsePowerUp3">Power-Up @UnityCatCost3</button>
    }
    @if (unitycatlevel >= 3)
    {
        <button class="btn btn-danger" @onclick="unitycat3" disabled=true>Multiclick: SOLD OUT!</button>
    }

</div>


<div class="button-container2">
    @if (level < 1)
    {
        <button class="btn @GetAutoMiningBronze()"  @onclick="StartAutoIncrement" disabled="@CanBuyBronze">Bronze level mining <p>Cost = @bronzelevel coins </p>1 coin per seconds</button>
    }
    else if(level == 1){
        <button class="btn @GetAutoMiningSilver()"  @onclick="StartAutoIncrement" disabled="@CanBuySilver">Silver level mining <p>Cost = @silverlevel coins </p>3 coin per seconds</button>
    }
    else if(level == 2){
        <button class="btn @GetAutoMiningGold()"  @onclick="StartAutoIncrement" disabled="@CanBuyGold">Gold level mining <p>Cost = @goldlevel coins </p>10 coin per seconds</button>
    }
    else if(level >= 3) {
        <button class="btn btn-danger" disabled="true">Turtles: SOLD OUT!</button>
    }
</div>

<!-- paavon koodi loppuu -->
@code {
    bool CanUsePowerUp => Coin <= UnityCatCost - 1;
    bool CanUsePowerUp2 => Coin <= UnityCatCost2 - 1;
    bool CanUsePowerUp3 => Coin <= UnityCatCost3 - 1;

    bool CanBuyBronze => Coin <= bronzelevel - 1;
    bool CanBuySilver => Coin <= silverlevel - 1;
    bool CanBuyGold => Coin <= goldlevel - 1;
    // auto incres
    private bool autoIncrement = false;

    //auto score cost
    private int bronzelevel = 15;
    private int silverlevel = 40;
    private int goldlevel = 120;
    private int level = 0;
    private int autoclick = 0;

    // double for COINS //
    private double Coin = 0;

    public double totalCoin = 0;

    // double for clicks //
    private double Click = 1;

    // Here are all of the upgrade costs //
    private double UnityCatCost = 10;
    private double UnityCatCost2 = 20;
    private double UnityCatCost3 = 30;

    //-----------------------------------------//
    // Here are all the Upgrade levels //
    private int unitycatlevel = 0;

    // this bool is for the 2x clicks power up, so the button will disapear when clicked/bought ones //
    private bool unitycatactivate = false;

    // Simple int for the click multiplier //
    private int clickMultiplier = 1;

    private bool IcanAffordUnitycat = true;

    // Method for how many clicks u get from single click //
    private void IncrementCount()
    {
        Coin += Click * clickMultiplier;
        totalCoin += Click * clickMultiplier;
    }

    // method for the Unity cat upgrade. //
    private void unitycat()
    {
        if (Coin >= UnityCatCost) {
            Coin -= UnityCatCost;
            unitycatlevel++;
            UnityCatCost = Math.Round((UnityCatCost * 1.2));
            Click = 2;
        }
    }
    private void unitycat2()
    {
        if (Coin >= UnityCatCost2) {
            Coin -= UnityCatCost2;
            unitycatlevel++;
            UnityCatCost2 = Math.Round((UnityCatCost2 * 1.2));
            Click = 5;
        }
    }
    private void unitycat3()
    {
        if (Coin >= UnityCatCost3) {
            Coin -= UnityCatCost3;
            unitycatlevel++;
            UnityCatCost3 = Math.Round((UnityCatCost3 * 1.2));
            Click = 8;
        }
    }

    // Method for the 2x power up //
    private void Powerups() {
        if (Coin >= 10000) {
        // here the click multiplier is changed to 2 so it will always give u 2x coins //
        clickMultiplier = 2;
        // this is for the powerup button to disapear when bought //
        unitycatactivate = true;
        }
        else {  
        }
    }

    //Method for auto add coins
    private async Task StartAutoIncrement()
    {
        if (Coin >= bronzelevel && level < 1){
            autoIncrement = true;
            level += 1;
            Coin -= bronzelevel;
            autoclick = 1;
            while (autoIncrement)
            {
                Coin += autoclick; // Increment the count
                totalCoin += autoclick;
                StateHasChanged(); // Refresh the UI
                await Task.Delay(1000); // Wait for 1 second asynchronously
            }
        }
        if(Coin >= silverlevel && level == 1){
            Coin -= silverlevel;
            autoIncrement = true;
            level += 1;
            autoclick = 3;
        }
        else if(Coin >= goldlevel && level == 2){
            Coin -= goldlevel;
            autoIncrement = true;
            level += 1;
            autoclick = 10;
        }
    }
    private void StopAutoIncrement(){
        autoIncrement = false; // Stop auto increment
    }
    private string GetAutoMiningBronze(){
        return CanBuyBronze ? "btn-danger" : "btn-success";
    }
    private string GetAutoMiningSilver(){
        return CanBuySilver ? "btn-danger" : "btn-success";
    }
    private string GetAutoMiningGold(){
        return CanBuyGold ? "btn-danger" : "btn-success";
    }

    private string GetPowerUpButtonClass(){
        return CanUsePowerUp ? "btn-danger" : "btn-success";
    }
    private string GetPowerUpButtonClass2(){
        return CanUsePowerUp2 ? "btn-danger" : "btn-success";
    }
    private string GetPowerUpButtonClass3(){
        return CanUsePowerUp3 ? "btn-danger" : "btn-success";
    }
    private async Task PlayMeow()
    {
        await JSRuntime.InvokeVoidAsync("playSound", "meowSound");
    }


    //JETI KOODI ALKU
    string? saveName;
    public string? alert = "";
    List<string> filut = new List<string>();
    List<string> splitFilut = new List<string>();

    public class Data
    {
        public double Coin { get; set; }
        public string Name { get; set; }

        public Data(double coin, string name)
        {
            Coin = coin;
            Name = name;
        }
    }
    public string savePath = Path.Combine(Directory.GetCurrentDirectory(), $"wwwroot{Path.DirectorySeparatorChar}",
        $"data{Path.DirectorySeparatorChar}");

    protected override async Task OnInitializedAsync()
    {
        LoadCoins();
        LoadAlert();
        SomeStartupMethod();
    }

    public void SomeStartupMethod()
    {
        string [] jsonContent = Directory.GetFiles(savePath);
        foreach(var files in jsonContent)
        {
            filut.Add(Path.GetFileName(files));
        }
    }
    public void NewSave()
    {
        string savePath = Path.Combine(Directory.GetCurrentDirectory(), $"wwwroot{Path.DirectorySeparatorChar}",
        $"data{Path.DirectorySeparatorChar}");
        string newDir = Path.Combine(savePath,$"{saveName}.json");
        var data = new Data(totalCoin, saveName);
        if(NameCheck(newDir))
        {
            if(WriteJson(newDir, data))
            {
                filut.Add(saveName + ".json");
                alert = "Game saved!";
            }
        } else {
            alert = "This file already exists!";
        }
    }

    public void SaveData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        var data = new Data(totalCoin, saveName);
        alert = "Game saved!";
        SaveCoins();
        SaveAlert();
        WriteJson(targetSave, data);
        StateHasChanged();
    }

    public void LoadData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        string saveContent = File.ReadAllText(targetSave);
        Data saveData = JsonSerializer.Deserialize<Data>(saveContent);
        Coin = saveData.Coin;
        alert = "Game Loaded!";
        SaveCoins();
        SaveAlert();
        StateHasChanged();
    }
    public void DeleteData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        alert = "Save Deleted!";
        SaveCoins();
        SaveAlert();
        File.Delete(targetSave);
        StateHasChanged();
    }

    private async Task Reset()
    {
        totalCoin = 0;
        Coin = 0;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "coin", Coin.ToString());
        StateHasChanged();
    }
    private async Task SaveCoins()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "coin", Coin.ToString());
    }
    private async Task LoadCoins()
    {
        var coinValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "coin");
        if (int.TryParse(coinValue, out int parsedValue))
        {
            totalCoin = parsedValue;
        }
    }
    private async Task SaveAlert()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "alert", alert);
    }
    private async Task LoadAlert()
    {
        var alertValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "alert");
        alert = alertValue;
        StateHasChanged();
    }

    public bool NameCheck(string userDir)
    {
        if (File.Exists(userDir))
        {
            return false;
        } else {
            return true;
        }
    }
    private bool WriteJson(string thisDir, Data data)
    {
        string jsonString = JsonSerializer.Serialize(data);
        File.WriteAllText(thisDir, jsonString);
        return true;
    }
    //JETI KOODI LOPPU
}
