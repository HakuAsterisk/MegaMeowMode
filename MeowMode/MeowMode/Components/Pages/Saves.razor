@page "/saves"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<PageTitle>Saves</PageTitle>
<style>
        #saveDiv {
            display: none;
        }
</style>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<div class="m-4">
<button class="btn btn-info" id="saveButton" style="height: 58px;"><img id="saveimage" src="images/saves.png"></button>
<p>@alert</p>
</div>

<div id="saveDiv">
    <button id="close" class="btn btn-danger">X</button>
    <button class="btn btn-info" @onclick="NewSave" style="color: rgb(245, 245, 245);">New Save</button>
    <input type="text" @bind="saveName" placeholder="Name your save"/><br>

@if (@filut.Count == 0)
{
    <p><em>No saves available</em></p>
}
else
{
    <table style="width: 100px;" class="table table-sm text-center">
        <thead>
            <tr>
                <th colspan="4">Saves</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var saves in filut)
            {
                <tr>
                    <td style="padding-top: 7px;">@saves</td>
                    <td><button @onclick="() => SaveData(saves)" class="btn-sm btn-primary popup">Save</button></td>
                    <td><button @onclick="() => LoadData(saves)" class="btn-sm btn-success popup">Load</button></td>
                    <td><button @onclick="() => DeleteData(saves)" class="btn-sm btn-danger popup">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

<script>
    $(document).ready(function(){
        $("#saveButton").click(function(){
            $("#saveDiv").show(1000);
        });

        $("#close").click(function(){
            $("#saveDiv").hide(1000);
        });
    });
</script>

@code{

    int Coin = 0;
    string? saveName;
    public string? alert = "";
    List<string> filut = new List<string>();
    List<string> splitFilut = new List<string>();

    public class Data
    {
        public int Coin { get; set; }
        public string Name { get; set; }

        public Data(int coin, string name)
        {
            Coin = coin;
            Name = name;
        }
    }
    public string savePath = Path.Combine(Directory.GetCurrentDirectory(), $"wwwroot{Path.DirectorySeparatorChar}",
        $"data{Path.DirectorySeparatorChar}");

    protected override async Task OnInitializedAsync()
    {
        LoadCoins();
        LoadAlert();
        SomeStartupMethod();
    }

    public void SomeStartupMethod()
    {
        string [] jsonContent = Directory.GetFiles(savePath);
        foreach(var files in jsonContent)
        {
            filut.Add(Path.GetFileName(files));
        }
    }

    public void Increment()
    {
        Coin++;
    }

    public void NewSave()
    {
        string savePath = Path.Combine(Directory.GetCurrentDirectory(), $"wwwroot{Path.DirectorySeparatorChar}",
        $"data{Path.DirectorySeparatorChar}");
        string newDir = Path.Combine(savePath,$"{saveName}.json");
        var data = new Data(Coin, saveName);
        if(NameCheck(newDir))
        {
            if(WriteJson(newDir, data))
            {
                filut.Add(saveName + ".json");
                alert = "Game saved!";
            }
        } else {
            alert = "This file already exists!";
        }
    }

    public void SaveData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        var data = new Data(Coin, saveName);
        alert = "Game saved!";
        SaveCoins();
        SaveAlert();
        WriteJson(targetSave, data);
    }

    public void LoadData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        string saveContent = File.ReadAllText(targetSave);
        Data saveData = JsonSerializer.Deserialize<Data>(saveContent);
        Coin = saveData.Coin;
        alert = "Game Loaded!";
    }
    public void DeleteData(string fileName)
    {
        string targetSave = Path.Combine(savePath,fileName);
        alert = "Save Deleted!";
        SaveCoins();
        SaveAlert();
        File.Delete(targetSave);
        StateHasChanged();
    }

    private async Task Reset()
    {
        Coin = 0;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "coin", Coin.ToString());
        StateHasChanged();
    }
    private async Task SaveCoins()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "coin", Coin.ToString());
    }
    private async Task LoadCoins()
    {
        var coinValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "coin");
        if (int.TryParse(coinValue, out int parsedValue))
        {
            Coin = parsedValue;
        }
    }
    private async Task SaveAlert()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "alert", alert);
    }
    private async Task LoadAlert()
    {
        var alertValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "alert");
        alert = alertValue;
        StateHasChanged();
    }

    public bool NameCheck(string userDir)
    {
        if (File.Exists(userDir))
        {
            return false;
        } else {
            return true;
        }
    }
    private bool WriteJson(string thisDir, Data data)
    {
        string jsonString = JsonSerializer.Serialize(data);
        File.WriteAllText(thisDir, jsonString);
        return true;
    }
}
